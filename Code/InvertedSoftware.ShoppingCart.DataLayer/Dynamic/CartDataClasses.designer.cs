#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InvertedSoftware.ShoppingCart.DataLayer.Dynamic
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="InvertedSoftwareCart")]
	public partial class CartDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertTax(Tax instance);
    partial void UpdateTax(Tax instance);
    partial void DeleteTax(Tax instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertCustomField(CustomField instance);
    partial void UpdateCustomField(CustomField instance);
    partial void DeleteCustomField(CustomField instance);
    partial void InsertCustomFieldType(CustomFieldType instance);
    partial void UpdateCustomFieldType(CustomFieldType instance);
    partial void DeleteCustomFieldType(CustomFieldType instance);
    partial void InsertFeaturedProduct(FeaturedProduct instance);
    partial void UpdateFeaturedProduct(FeaturedProduct instance);
    partial void DeleteFeaturedProduct(FeaturedProduct instance);
    partial void InsertImage(Image instance);
    partial void UpdateImage(Image instance);
    partial void DeleteImage(Image instance);
    partial void InsertInventory(Inventory instance);
    partial void UpdateInventory(Inventory instance);
    partial void DeleteInventory(Inventory instance);
    partial void InsertInventoryAction(InventoryAction instance);
    partial void UpdateInventoryAction(InventoryAction instance);
    partial void DeleteInventoryAction(InventoryAction instance);
    partial void InsertInventoryProductOption(InventoryProductOption instance);
    partial void UpdateInventoryProductOption(InventoryProductOption instance);
    partial void DeleteInventoryProductOption(InventoryProductOption instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertOrderProduct(OrderProduct instance);
    partial void UpdateOrderProduct(OrderProduct instance);
    partial void DeleteOrderProduct(OrderProduct instance);
    partial void InsertOrderProductCustomField(OrderProductCustomField instance);
    partial void UpdateOrderProductCustomField(OrderProductCustomField instance);
    partial void DeleteOrderProductCustomField(OrderProductCustomField instance);
    partial void InsertOrderProductOption(OrderProductOption instance);
    partial void UpdateOrderProductOption(OrderProductOption instance);
    partial void DeleteOrderProductOption(OrderProductOption instance);
    partial void InsertOrderStatus(OrderStatus instance);
    partial void UpdateOrderStatus(OrderStatus instance);
    partial void DeleteOrderStatus(OrderStatus instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertProductCategory(ProductCategory instance);
    partial void UpdateProductCategory(ProductCategory instance);
    partial void DeleteProductCategory(ProductCategory instance);
    partial void InsertProductDownloadKey(ProductDownloadKey instance);
    partial void UpdateProductDownloadKey(ProductDownloadKey instance);
    partial void DeleteProductDownloadKey(ProductDownloadKey instance);
    partial void InsertProductOption(ProductOption instance);
    partial void UpdateProductOption(ProductOption instance);
    partial void DeleteProductOption(ProductOption instance);
    partial void InsertProductReview(ProductReview instance);
    partial void UpdateProductReview(ProductReview instance);
    partial void DeleteProductReview(ProductReview instance);
    partial void InsertProductReviewCaregoryProductReview(ProductReviewCaregoryProductReview instance);
    partial void UpdateProductReviewCaregoryProductReview(ProductReviewCaregoryProductReview instance);
    partial void DeleteProductReviewCaregoryProductReview(ProductReviewCaregoryProductReview instance);
    partial void InsertProductReviewCategory(ProductReviewCategory instance);
    partial void UpdateProductReviewCategory(ProductReviewCategory instance);
    partial void DeleteProductReviewCategory(ProductReviewCategory instance);
    partial void InsertProductTag(ProductTag instance);
    partial void UpdateProductTag(ProductTag instance);
    partial void DeleteProductTag(ProductTag instance);
    partial void InsertProvince(Province instance);
    partial void UpdateProvince(Province instance);
    partial void DeleteProvince(Province instance);
    partial void InsertRelatedProduct(RelatedProduct instance);
    partial void UpdateRelatedProduct(RelatedProduct instance);
    partial void DeleteRelatedProduct(RelatedProduct instance);
    partial void InsertShipping(Shipping instance);
    partial void UpdateShipping(Shipping instance);
    partial void DeleteShipping(Shipping instance);
    partial void InsertShippingProvider(ShippingProvider instance);
    partial void UpdateShippingProvider(ShippingProvider instance);
    partial void DeleteShippingProvider(ShippingProvider instance);
    partial void InsertState(State instance);
    partial void UpdateState(State instance);
    partial void DeleteState(State instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    #endregion
			
		public CartDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CartDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CartDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CartDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Tax> Taxes
		{
			get
			{
				return this.GetTable<Tax>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<CustomField> CustomFields
		{
			get
			{
				return this.GetTable<CustomField>();
			}
		}
		
		public System.Data.Linq.Table<CustomFieldType> CustomFieldTypes
		{
			get
			{
				return this.GetTable<CustomFieldType>();
			}
		}
		
		public System.Data.Linq.Table<FeaturedProduct> FeaturedProducts
		{
			get
			{
				return this.GetTable<FeaturedProduct>();
			}
		}
		
		public System.Data.Linq.Table<Image> Images
		{
			get
			{
				return this.GetTable<Image>();
			}
		}
		
		public System.Data.Linq.Table<Inventory> Inventories
		{
			get
			{
				return this.GetTable<Inventory>();
			}
		}
		
		public System.Data.Linq.Table<InventoryAction> InventoryActions
		{
			get
			{
				return this.GetTable<InventoryAction>();
			}
		}
		
		public System.Data.Linq.Table<InventoryProductOption> InventoryProductOptions
		{
			get
			{
				return this.GetTable<InventoryProductOption>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<OrderProduct> OrderProducts
		{
			get
			{
				return this.GetTable<OrderProduct>();
			}
		}
		
		public System.Data.Linq.Table<OrderProductCustomField> OrderProductCustomFields
		{
			get
			{
				return this.GetTable<OrderProductCustomField>();
			}
		}
		
		public System.Data.Linq.Table<OrderProductOption> OrderProductOptions
		{
			get
			{
				return this.GetTable<OrderProductOption>();
			}
		}
		
		public System.Data.Linq.Table<OrderStatus> OrderStatus
		{
			get
			{
				return this.GetTable<OrderStatus>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<ProductCategory> ProductCategories
		{
			get
			{
				return this.GetTable<ProductCategory>();
			}
		}
		
		public System.Data.Linq.Table<ProductDownloadKey> ProductDownloadKeys
		{
			get
			{
				return this.GetTable<ProductDownloadKey>();
			}
		}
		
		public System.Data.Linq.Table<ProductOption> ProductOptions
		{
			get
			{
				return this.GetTable<ProductOption>();
			}
		}
		
		public System.Data.Linq.Table<ProductReview> ProductReviews
		{
			get
			{
				return this.GetTable<ProductReview>();
			}
		}
		
		public System.Data.Linq.Table<ProductReviewCaregoryProductReview> ProductReviewCaregoryProductReviews
		{
			get
			{
				return this.GetTable<ProductReviewCaregoryProductReview>();
			}
		}
		
		public System.Data.Linq.Table<ProductReviewCategory> ProductReviewCategories
		{
			get
			{
				return this.GetTable<ProductReviewCategory>();
			}
		}
		
		public System.Data.Linq.Table<ProductTag> ProductTags
		{
			get
			{
				return this.GetTable<ProductTag>();
			}
		}
		
		public System.Data.Linq.Table<Province> Provinces
		{
			get
			{
				return this.GetTable<Province>();
			}
		}
		
		public System.Data.Linq.Table<RelatedProduct> RelatedProducts
		{
			get
			{
				return this.GetTable<RelatedProduct>();
			}
		}
		
		public System.Data.Linq.Table<Shipping> Shippings
		{
			get
			{
				return this.GetTable<Shipping>();
			}
		}
		
		public System.Data.Linq.Table<ShippingProvider> ShippingProviders
		{
			get
			{
				return this.GetTable<ShippingProvider>();
			}
		}
		
		public System.Data.Linq.Table<State> States
		{
			get
			{
				return this.GetTable<State>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private System.Nullable<int> _ParentCategoryID;
		
		private string _CategoryName;
		
		private bool _Active;
		
		private EntitySet<FeaturedProduct> _FeaturedProducts;
		
		private EntitySet<ProductCategory> _ProductCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnParentCategoryIDChanging(System.Nullable<int> value);
    partial void OnParentCategoryIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Category()
		{
			this._FeaturedProducts = new EntitySet<FeaturedProduct>(new Action<FeaturedProduct>(this.attach_FeaturedProducts), new Action<FeaturedProduct>(this.detach_FeaturedProducts));
			this._ProductCategories = new EntitySet<ProductCategory>(new Action<ProductCategory>(this.attach_ProductCategories), new Action<ProductCategory>(this.detach_ProductCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentCategoryID", DbType="Int")]
		public System.Nullable<int> ParentCategoryID
		{
			get
			{
				return this._ParentCategoryID;
			}
			set
			{
				if ((this._ParentCategoryID != value))
				{
					this.OnParentCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._ParentCategoryID = value;
					this.SendPropertyChanged("ParentCategoryID");
					this.OnParentCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_FeaturedProduct", Storage="_FeaturedProducts", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<FeaturedProduct> FeaturedProducts
		{
			get
			{
				return this._FeaturedProducts;
			}
			set
			{
				this._FeaturedProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_ProductCategory", Storage="_ProductCategories", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<ProductCategory> ProductCategories
		{
			get
			{
				return this._ProductCategories;
			}
			set
			{
				this._ProductCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FeaturedProducts(FeaturedProduct entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_FeaturedProducts(FeaturedProduct entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_ProductCategories(ProductCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_ProductCategories(ProductCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tax")]
	public partial class Tax : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaxID;
		
		private string _TaxName;
		
		private bool _Fixed;
		
		private System.Nullable<decimal> _Amount;
		
		private int _CountryID;
		
		private System.Nullable<int> _StateID;
		
		private System.Nullable<int> _ProvinceID;
		
		private bool _Active;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Province> _Province;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaxIDChanging(int value);
    partial void OnTaxIDChanged();
    partial void OnTaxNameChanging(string value);
    partial void OnTaxNameChanged();
    partial void OnFixedChanging(bool value);
    partial void OnFixedChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnStateIDChanging(System.Nullable<int> value);
    partial void OnStateIDChanged();
    partial void OnProvinceIDChanging(System.Nullable<int> value);
    partial void OnProvinceIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Tax()
		{
			this._Country = default(EntityRef<Country>);
			this._Province = default(EntityRef<Province>);
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaxID
		{
			get
			{
				return this._TaxID;
			}
			set
			{
				if ((this._TaxID != value))
				{
					this.OnTaxIDChanging(value);
					this.SendPropertyChanging();
					this._TaxID = value;
					this.SendPropertyChanged("TaxID");
					this.OnTaxIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TaxName
		{
			get
			{
				return this._TaxName;
			}
			set
			{
				if ((this._TaxName != value))
				{
					this.OnTaxNameChanging(value);
					this.SendPropertyChanging();
					this._TaxName = value;
					this.SendPropertyChanged("TaxName");
					this.OnTaxNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fixed", DbType="Bit NOT NULL")]
		public bool Fixed
		{
			get
			{
				return this._Fixed;
			}
			set
			{
				if ((this._Fixed != value))
				{
					this.OnFixedChanging(value);
					this.SendPropertyChanging();
					this._Fixed = value;
					this.SendPropertyChanged("Fixed");
					this.OnFixedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,3)")]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int NOT NULL")]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Int")]
		public System.Nullable<int> StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", DbType="Int")]
		public System.Nullable<int> ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					if (this._Province.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceID = value;
					this.SendPropertyChanged("ProvinceID");
					this.OnProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Tax", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Taxes.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Taxes.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_Tax", Storage="_Province", ThisKey="ProvinceID", OtherKey="ProvinceID", IsForeignKey=true)]
		public Province Province
		{
			get
			{
				return this._Province.Entity;
			}
			set
			{
				Province previousValue = this._Province.Entity;
				if (((previousValue != value) 
							|| (this._Province.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Province.Entity = null;
						previousValue.Taxes.Remove(this);
					}
					this._Province.Entity = value;
					if ((value != null))
					{
						value.Taxes.Add(this);
						this._ProvinceID = value.ProvinceID;
					}
					else
					{
						this._ProvinceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Province");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Tax", Storage="_State", ThisKey="StateID", OtherKey="StateID", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.Taxes.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.Taxes.Add(this);
						this._StateID = value.StateID;
					}
					else
					{
						this._StateID = default(Nullable<int>);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CountryID;
		
		private string _CountryName;
		
		private string _CountryCode;
		
		private bool _Active;
		
		private EntitySet<Tax> _Taxes;
		
		private EntitySet<Customer> _Customers;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<Shipping> _Shippings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Country()
		{
			this._Taxes = new EntitySet<Tax>(new Action<Tax>(this.attach_Taxes), new Action<Tax>(this.detach_Taxes));
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Shippings = new EntitySet<Shipping>(new Action<Shipping>(this.attach_Shippings), new Action<Shipping>(this.detach_Shippings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this.OnCountryNameChanging(value);
					this.SendPropertyChanging();
					this._CountryName = value;
					this.SendPropertyChanged("CountryName");
					this.OnCountryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryCode", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Tax", Storage="_Taxes", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<Tax> Taxes
		{
			get
			{
				return this._Taxes;
			}
			set
			{
				this._Taxes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Customer", Storage="_Customers", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Order", Storage="_Orders", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Shipping", Storage="_Shippings", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<Shipping> Shippings
		{
			get
			{
				return this._Shippings;
			}
			set
			{
				this._Shippings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Taxes(Tax entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Taxes(Tax entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Shippings(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Shippings(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerID;
		
		private System.Guid _MemberID;
		
		private string _Company;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Address;
		
		private string _City;
		
		private System.Nullable<int> _StateID;
		
		private System.Nullable<int> _ProvinceID;
		
		private System.Nullable<int> _CountryID;
		
		private string _Zipcode;
		
		private string _DayPhone;
		
		private string _EveningPhone;
		
		private string _CellPhone;
		
		private string _Fax;
		
		private string _Email;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private System.Nullable<System.DateTime> _DateUpdated;
		
		private bool _Active;
		
		private EntitySet<ProductReview> _ProductReviews;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Province> _Province;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnMemberIDChanging(System.Guid value);
    partial void OnMemberIDChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateIDChanging(System.Nullable<int> value);
    partial void OnStateIDChanged();
    partial void OnProvinceIDChanging(System.Nullable<int> value);
    partial void OnProvinceIDChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnZipcodeChanging(string value);
    partial void OnZipcodeChanged();
    partial void OnDayPhoneChanging(string value);
    partial void OnDayPhoneChanged();
    partial void OnEveningPhoneChanging(string value);
    partial void OnEveningPhoneChanged();
    partial void OnCellPhoneChanging(string value);
    partial void OnCellPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdatedChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Customer()
		{
			this._ProductReviews = new EntitySet<ProductReview>(new Action<ProductReview>(this.attach_ProductReviews), new Action<ProductReview>(this.detach_ProductReviews));
			this._Country = default(EntityRef<Country>);
			this._Province = default(EntityRef<Province>);
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company", DbType="VarChar(50)")]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Int")]
		public System.Nullable<int> StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", DbType="Int")]
		public System.Nullable<int> ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					if (this._Province.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceID = value;
					this.SendPropertyChanged("ProvinceID");
					this.OnProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zipcode", DbType="VarChar(50)")]
		public string Zipcode
		{
			get
			{
				return this._Zipcode;
			}
			set
			{
				if ((this._Zipcode != value))
				{
					this.OnZipcodeChanging(value);
					this.SendPropertyChanging();
					this._Zipcode = value;
					this.SendPropertyChanged("Zipcode");
					this.OnZipcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayPhone", DbType="VarChar(50)")]
		public string DayPhone
		{
			get
			{
				return this._DayPhone;
			}
			set
			{
				if ((this._DayPhone != value))
				{
					this.OnDayPhoneChanging(value);
					this.SendPropertyChanging();
					this._DayPhone = value;
					this.SendPropertyChanged("DayPhone");
					this.OnDayPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EveningPhone", DbType="VarChar(50)")]
		public string EveningPhone
		{
			get
			{
				return this._EveningPhone;
			}
			set
			{
				if ((this._EveningPhone != value))
				{
					this.OnEveningPhoneChanging(value);
					this.SendPropertyChanging();
					this._EveningPhone = value;
					this.SendPropertyChanged("EveningPhone");
					this.OnEveningPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellPhone", DbType="VarChar(50)")]
		public string CellPhone
		{
			get
			{
				return this._CellPhone;
			}
			set
			{
				if ((this._CellPhone != value))
				{
					this.OnCellPhoneChanging(value);
					this.SendPropertyChanging();
					this._CellPhone = value;
					this.SendPropertyChanged("CellPhone");
					this.OnCellPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(50)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_ProductReview", Storage="_ProductReviews", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<ProductReview> ProductReviews
		{
			get
			{
				return this._ProductReviews;
			}
			set
			{
				this._ProductReviews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Customer", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_Customer", Storage="_Province", ThisKey="ProvinceID", OtherKey="ProvinceID", IsForeignKey=true)]
		public Province Province
		{
			get
			{
				return this._Province.Entity;
			}
			set
			{
				Province previousValue = this._Province.Entity;
				if (((previousValue != value) 
							|| (this._Province.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Province.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Province.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._ProvinceID = value.ProvinceID;
					}
					else
					{
						this._ProvinceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Province");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Customer", Storage="_State", ThisKey="StateID", OtherKey="StateID", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._StateID = value.StateID;
					}
					else
					{
						this._StateID = default(Nullable<int>);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductReviews(ProductReview entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_ProductReviews(ProductReview entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomField")]
	public partial class CustomField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomFieldID;
		
		private System.Nullable<int> _ProductID;
		
		private string _CustomFieldName;
		
		private int _CustomFieldTypeID;
		
		private bool _IsRequired;
		
		private bool _Active;
		
		private EntitySet<OrderProductCustomField> _OrderProductCustomFields;
		
		private EntityRef<CustomFieldType> _CustomFieldType;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomFieldIDChanging(int value);
    partial void OnCustomFieldIDChanged();
    partial void OnProductIDChanging(System.Nullable<int> value);
    partial void OnProductIDChanged();
    partial void OnCustomFieldNameChanging(string value);
    partial void OnCustomFieldNameChanged();
    partial void OnCustomFieldTypeIDChanging(int value);
    partial void OnCustomFieldTypeIDChanged();
    partial void OnIsRequiredChanging(bool value);
    partial void OnIsRequiredChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public CustomField()
		{
			this._OrderProductCustomFields = new EntitySet<OrderProductCustomField>(new Action<OrderProductCustomField>(this.attach_OrderProductCustomFields), new Action<OrderProductCustomField>(this.detach_OrderProductCustomFields));
			this._CustomFieldType = default(EntityRef<CustomFieldType>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomFieldID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomFieldID
		{
			get
			{
				return this._CustomFieldID;
			}
			set
			{
				if ((this._CustomFieldID != value))
				{
					this.OnCustomFieldIDChanging(value);
					this.SendPropertyChanging();
					this._CustomFieldID = value;
					this.SendPropertyChanged("CustomFieldID");
					this.OnCustomFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int")]
		public System.Nullable<int> ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomFieldName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CustomFieldName
		{
			get
			{
				return this._CustomFieldName;
			}
			set
			{
				if ((this._CustomFieldName != value))
				{
					this.OnCustomFieldNameChanging(value);
					this.SendPropertyChanging();
					this._CustomFieldName = value;
					this.SendPropertyChanged("CustomFieldName");
					this.OnCustomFieldNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomFieldTypeID", DbType="Int NOT NULL")]
		public int CustomFieldTypeID
		{
			get
			{
				return this._CustomFieldTypeID;
			}
			set
			{
				if ((this._CustomFieldTypeID != value))
				{
					if (this._CustomFieldType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomFieldTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CustomFieldTypeID = value;
					this.SendPropertyChanged("CustomFieldTypeID");
					this.OnCustomFieldTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRequired", DbType="Bit NOT NULL")]
		public bool IsRequired
		{
			get
			{
				return this._IsRequired;
			}
			set
			{
				if ((this._IsRequired != value))
				{
					this.OnIsRequiredChanging(value);
					this.SendPropertyChanging();
					this._IsRequired = value;
					this.SendPropertyChanged("IsRequired");
					this.OnIsRequiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomField_OrderProductCustomField", Storage="_OrderProductCustomFields", ThisKey="CustomFieldID", OtherKey="CustomFieldID")]
		public EntitySet<OrderProductCustomField> OrderProductCustomFields
		{
			get
			{
				return this._OrderProductCustomFields;
			}
			set
			{
				this._OrderProductCustomFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomFieldType_CustomField", Storage="_CustomFieldType", ThisKey="CustomFieldTypeID", OtherKey="CustomFieldTypeID", IsForeignKey=true)]
		public CustomFieldType CustomFieldType
		{
			get
			{
				return this._CustomFieldType.Entity;
			}
			set
			{
				CustomFieldType previousValue = this._CustomFieldType.Entity;
				if (((previousValue != value) 
							|| (this._CustomFieldType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomFieldType.Entity = null;
						previousValue.CustomFields.Remove(this);
					}
					this._CustomFieldType.Entity = value;
					if ((value != null))
					{
						value.CustomFields.Add(this);
						this._CustomFieldTypeID = value.CustomFieldTypeID;
					}
					else
					{
						this._CustomFieldTypeID = default(int);
					}
					this.SendPropertyChanged("CustomFieldType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_CustomField", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.CustomFields.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.CustomFields.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderProductCustomFields(OrderProductCustomField entity)
		{
			this.SendPropertyChanging();
			entity.CustomField = this;
		}
		
		private void detach_OrderProductCustomFields(OrderProductCustomField entity)
		{
			this.SendPropertyChanging();
			entity.CustomField = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomFieldType")]
	public partial class CustomFieldType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomFieldTypeID;
		
		private string _CustomFieldTypeName;
		
		private bool _Active;
		
		private EntitySet<CustomField> _CustomFields;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomFieldTypeIDChanging(int value);
    partial void OnCustomFieldTypeIDChanged();
    partial void OnCustomFieldTypeNameChanging(string value);
    partial void OnCustomFieldTypeNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public CustomFieldType()
		{
			this._CustomFields = new EntitySet<CustomField>(new Action<CustomField>(this.attach_CustomFields), new Action<CustomField>(this.detach_CustomFields));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomFieldTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomFieldTypeID
		{
			get
			{
				return this._CustomFieldTypeID;
			}
			set
			{
				if ((this._CustomFieldTypeID != value))
				{
					this.OnCustomFieldTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CustomFieldTypeID = value;
					this.SendPropertyChanged("CustomFieldTypeID");
					this.OnCustomFieldTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomFieldTypeName", DbType="VarChar(50)")]
		public string CustomFieldTypeName
		{
			get
			{
				return this._CustomFieldTypeName;
			}
			set
			{
				if ((this._CustomFieldTypeName != value))
				{
					this.OnCustomFieldTypeNameChanging(value);
					this.SendPropertyChanging();
					this._CustomFieldTypeName = value;
					this.SendPropertyChanged("CustomFieldTypeName");
					this.OnCustomFieldTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomFieldType_CustomField", Storage="_CustomFields", ThisKey="CustomFieldTypeID", OtherKey="CustomFieldTypeID")]
		public EntitySet<CustomField> CustomFields
		{
			get
			{
				return this._CustomFields;
			}
			set
			{
				this._CustomFields.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomFields(CustomField entity)
		{
			this.SendPropertyChanging();
			entity.CustomFieldType = this;
		}
		
		private void detach_CustomFields(CustomField entity)
		{
			this.SendPropertyChanging();
			entity.CustomFieldType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FeaturedProduct")]
	public partial class FeaturedProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FeaturedProductID;
		
		private int _ProductID;
		
		private System.Nullable<int> _CategoryID;
		
		private bool _Active;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeaturedProductIDChanging(int value);
    partial void OnFeaturedProductIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnCategoryIDChanging(System.Nullable<int> value);
    partial void OnCategoryIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public FeaturedProduct()
		{
			this._Category = default(EntityRef<Category>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeaturedProductID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FeaturedProductID
		{
			get
			{
				return this._FeaturedProductID;
			}
			set
			{
				if ((this._FeaturedProductID != value))
				{
					this.OnFeaturedProductIDChanging(value);
					this.SendPropertyChanging();
					this._FeaturedProductID = value;
					this.SendPropertyChanged("FeaturedProductID");
					this.OnFeaturedProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int")]
		public System.Nullable<int> CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_FeaturedProduct", Storage="_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.FeaturedProducts.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.FeaturedProducts.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_FeaturedProduct", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.FeaturedProducts.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.FeaturedProducts.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Image")]
	public partial class Image : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ImageID;
		
		private System.Nullable<int> _ParentID;
		
		private int _ProductID;
		
		private System.Nullable<int> _SortOrder;
		
		private string _ImageName;
		
		private string _ImageURL;
		
		private bool _Active;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImageIDChanging(int value);
    partial void OnImageIDChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnSortOrderChanging(System.Nullable<int> value);
    partial void OnSortOrderChanged();
    partial void OnImageNameChanging(string value);
    partial void OnImageNameChanged();
    partial void OnImageURLChanging(string value);
    partial void OnImageURLChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Image()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Int")]
		public System.Nullable<int> SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageName", DbType="VarChar(200)")]
		public string ImageName
		{
			get
			{
				return this._ImageName;
			}
			set
			{
				if ((this._ImageName != value))
				{
					this.OnImageNameChanging(value);
					this.SendPropertyChanging();
					this._ImageName = value;
					this.SendPropertyChanged("ImageName");
					this.OnImageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageURL", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string ImageURL
		{
			get
			{
				return this._ImageURL;
			}
			set
			{
				if ((this._ImageURL != value))
				{
					this.OnImageURLChanging(value);
					this.SendPropertyChanging();
					this._ImageURL = value;
					this.SendPropertyChanged("ImageURL");
					this.OnImageURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Image", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Images.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Images.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Inventory")]
	public partial class Inventory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InventoryID;
		
		private int _InventoryActionID;
		
		private int _ProductID;
		
		private int _ProductAmountInStock;
		
		private bool _Active;
		
		private EntitySet<InventoryProductOption> _InventoryProductOptions;
		
		private EntityRef<InventoryAction> _InventoryAction;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInventoryIDChanging(int value);
    partial void OnInventoryIDChanged();
    partial void OnInventoryActionIDChanging(int value);
    partial void OnInventoryActionIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnProductAmountInStockChanging(int value);
    partial void OnProductAmountInStockChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Inventory()
		{
			this._InventoryProductOptions = new EntitySet<InventoryProductOption>(new Action<InventoryProductOption>(this.attach_InventoryProductOptions), new Action<InventoryProductOption>(this.detach_InventoryProductOptions));
			this._InventoryAction = default(EntityRef<InventoryAction>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InventoryID
		{
			get
			{
				return this._InventoryID;
			}
			set
			{
				if ((this._InventoryID != value))
				{
					this.OnInventoryIDChanging(value);
					this.SendPropertyChanging();
					this._InventoryID = value;
					this.SendPropertyChanged("InventoryID");
					this.OnInventoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryActionID", DbType="Int NOT NULL")]
		public int InventoryActionID
		{
			get
			{
				return this._InventoryActionID;
			}
			set
			{
				if ((this._InventoryActionID != value))
				{
					if (this._InventoryAction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInventoryActionIDChanging(value);
					this.SendPropertyChanging();
					this._InventoryActionID = value;
					this.SendPropertyChanged("InventoryActionID");
					this.OnInventoryActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductAmountInStock", DbType="Int NOT NULL")]
		public int ProductAmountInStock
		{
			get
			{
				return this._ProductAmountInStock;
			}
			set
			{
				if ((this._ProductAmountInStock != value))
				{
					this.OnProductAmountInStockChanging(value);
					this.SendPropertyChanging();
					this._ProductAmountInStock = value;
					this.SendPropertyChanged("ProductAmountInStock");
					this.OnProductAmountInStockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inventory_InventoryProductOption", Storage="_InventoryProductOptions", ThisKey="InventoryID", OtherKey="InventoryID")]
		public EntitySet<InventoryProductOption> InventoryProductOptions
		{
			get
			{
				return this._InventoryProductOptions;
			}
			set
			{
				this._InventoryProductOptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InventoryAction_Inventory", Storage="_InventoryAction", ThisKey="InventoryActionID", OtherKey="InventoryActionID", IsForeignKey=true)]
		public InventoryAction InventoryAction
		{
			get
			{
				return this._InventoryAction.Entity;
			}
			set
			{
				InventoryAction previousValue = this._InventoryAction.Entity;
				if (((previousValue != value) 
							|| (this._InventoryAction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InventoryAction.Entity = null;
						previousValue.Inventories.Remove(this);
					}
					this._InventoryAction.Entity = value;
					if ((value != null))
					{
						value.Inventories.Add(this);
						this._InventoryActionID = value.InventoryActionID;
					}
					else
					{
						this._InventoryActionID = default(int);
					}
					this.SendPropertyChanged("InventoryAction");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Inventory", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Inventories.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Inventories.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InventoryProductOptions(InventoryProductOption entity)
		{
			this.SendPropertyChanging();
			entity.Inventory = this;
		}
		
		private void detach_InventoryProductOptions(InventoryProductOption entity)
		{
			this.SendPropertyChanging();
			entity.Inventory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InventoryAction")]
	public partial class InventoryAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InventoryActionID;
		
		private string _InventoryActionName;
		
		private EntitySet<Inventory> _Inventories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInventoryActionIDChanging(int value);
    partial void OnInventoryActionIDChanged();
    partial void OnInventoryActionNameChanging(string value);
    partial void OnInventoryActionNameChanged();
    #endregion
		
		public InventoryAction()
		{
			this._Inventories = new EntitySet<Inventory>(new Action<Inventory>(this.attach_Inventories), new Action<Inventory>(this.detach_Inventories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryActionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InventoryActionID
		{
			get
			{
				return this._InventoryActionID;
			}
			set
			{
				if ((this._InventoryActionID != value))
				{
					this.OnInventoryActionIDChanging(value);
					this.SendPropertyChanging();
					this._InventoryActionID = value;
					this.SendPropertyChanged("InventoryActionID");
					this.OnInventoryActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryActionName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string InventoryActionName
		{
			get
			{
				return this._InventoryActionName;
			}
			set
			{
				if ((this._InventoryActionName != value))
				{
					this.OnInventoryActionNameChanging(value);
					this.SendPropertyChanging();
					this._InventoryActionName = value;
					this.SendPropertyChanged("InventoryActionName");
					this.OnInventoryActionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InventoryAction_Inventory", Storage="_Inventories", ThisKey="InventoryActionID", OtherKey="InventoryActionID")]
		public EntitySet<Inventory> Inventories
		{
			get
			{
				return this._Inventories;
			}
			set
			{
				this._Inventories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.InventoryAction = this;
		}
		
		private void detach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.InventoryAction = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InventoryProductOption")]
	public partial class InventoryProductOption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InventoryProductOptionID;
		
		private int _InventoryID;
		
		private int _ProductOptionID;
		
		private bool _Active;
		
		private EntityRef<Inventory> _Inventory;
		
		private EntityRef<ProductOption> _ProductOption;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInventoryProductOptionIDChanging(int value);
    partial void OnInventoryProductOptionIDChanged();
    partial void OnInventoryIDChanging(int value);
    partial void OnInventoryIDChanged();
    partial void OnProductOptionIDChanging(int value);
    partial void OnProductOptionIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public InventoryProductOption()
		{
			this._Inventory = default(EntityRef<Inventory>);
			this._ProductOption = default(EntityRef<ProductOption>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryProductOptionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InventoryProductOptionID
		{
			get
			{
				return this._InventoryProductOptionID;
			}
			set
			{
				if ((this._InventoryProductOptionID != value))
				{
					this.OnInventoryProductOptionIDChanging(value);
					this.SendPropertyChanging();
					this._InventoryProductOptionID = value;
					this.SendPropertyChanged("InventoryProductOptionID");
					this.OnInventoryProductOptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryID", DbType="Int NOT NULL")]
		public int InventoryID
		{
			get
			{
				return this._InventoryID;
			}
			set
			{
				if ((this._InventoryID != value))
				{
					if (this._Inventory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInventoryIDChanging(value);
					this.SendPropertyChanging();
					this._InventoryID = value;
					this.SendPropertyChanged("InventoryID");
					this.OnInventoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductOptionID", DbType="Int NOT NULL")]
		public int ProductOptionID
		{
			get
			{
				return this._ProductOptionID;
			}
			set
			{
				if ((this._ProductOptionID != value))
				{
					if (this._ProductOption.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductOptionIDChanging(value);
					this.SendPropertyChanging();
					this._ProductOptionID = value;
					this.SendPropertyChanged("ProductOptionID");
					this.OnProductOptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inventory_InventoryProductOption", Storage="_Inventory", ThisKey="InventoryID", OtherKey="InventoryID", IsForeignKey=true)]
		public Inventory Inventory
		{
			get
			{
				return this._Inventory.Entity;
			}
			set
			{
				Inventory previousValue = this._Inventory.Entity;
				if (((previousValue != value) 
							|| (this._Inventory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inventory.Entity = null;
						previousValue.InventoryProductOptions.Remove(this);
					}
					this._Inventory.Entity = value;
					if ((value != null))
					{
						value.InventoryProductOptions.Add(this);
						this._InventoryID = value.InventoryID;
					}
					else
					{
						this._InventoryID = default(int);
					}
					this.SendPropertyChanged("Inventory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductOption_InventoryProductOption", Storage="_ProductOption", ThisKey="ProductOptionID", OtherKey="ProductOptionID", IsForeignKey=true)]
		public ProductOption ProductOption
		{
			get
			{
				return this._ProductOption.Entity;
			}
			set
			{
				ProductOption previousValue = this._ProductOption.Entity;
				if (((previousValue != value) 
							|| (this._ProductOption.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductOption.Entity = null;
						previousValue.InventoryProductOptions.Remove(this);
					}
					this._ProductOption.Entity = value;
					if ((value != null))
					{
						value.InventoryProductOptions.Add(this);
						this._ProductOptionID = value.ProductOptionID;
					}
					else
					{
						this._ProductOptionID = default(int);
					}
					this.SendPropertyChanged("ProductOption");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderID;
		
		private System.Nullable<int> _CustomerID;
		
		private string _OrderNumber;
		
		private System.Nullable<System.DateTime> _OrderDate;
		
		private System.Nullable<int> _OrderStatusID;
		
		private System.Nullable<int> _ShippingProviderID;
		
		private string _ShippingNumber;
		
		private string _Address;
		
		private string _City;
		
		private System.Nullable<int> _StateID;
		
		private System.Nullable<int> _ProvinceID;
		
		private System.Nullable<int> _CountryID;
		
		private string _Zipcode;
		
		private string _Comments;
		
		private System.Nullable<System.DateTime> _DatePlaced;
		
		private System.Nullable<System.DateTime> _DateShipped;
		
		private System.Nullable<decimal> _Total;
		
		private System.Nullable<decimal> _Shipping;
		
		private System.Nullable<decimal> _Tax;
		
		private bool _Active;
		
		private EntitySet<OrderProduct> _OrderProducts;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<OrderStatus> _OrderStatus;
		
		private EntityRef<Province> _Province;
		
		private EntityRef<ShippingProvider> _ShippingProvider;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnCustomerIDChanging(System.Nullable<int> value);
    partial void OnCustomerIDChanged();
    partial void OnOrderNumberChanging(string value);
    partial void OnOrderNumberChanged();
    partial void OnOrderDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrderDateChanged();
    partial void OnOrderStatusIDChanging(System.Nullable<int> value);
    partial void OnOrderStatusIDChanged();
    partial void OnShippingProviderIDChanging(System.Nullable<int> value);
    partial void OnShippingProviderIDChanged();
    partial void OnShippingNumberChanging(string value);
    partial void OnShippingNumberChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateIDChanging(System.Nullable<int> value);
    partial void OnStateIDChanged();
    partial void OnProvinceIDChanging(System.Nullable<int> value);
    partial void OnProvinceIDChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnZipcodeChanging(string value);
    partial void OnZipcodeChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnDatePlacedChanging(System.Nullable<System.DateTime> value);
    partial void OnDatePlacedChanged();
    partial void OnDateShippedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateShippedChanged();
    partial void OnTotalChanging(System.Nullable<decimal> value);
    partial void OnTotalChanged();
    partial void OnShippingChanging(System.Nullable<decimal> value);
    partial void OnShippingChanged();
    partial void OnTaxChanging(System.Nullable<decimal> value);
    partial void OnTaxChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Order()
		{
			this._OrderProducts = new EntitySet<OrderProduct>(new Action<OrderProduct>(this.attach_OrderProducts), new Action<OrderProduct>(this.detach_OrderProducts));
			this._Country = default(EntityRef<Country>);
			this._OrderStatus = default(EntityRef<OrderStatus>);
			this._Province = default(EntityRef<Province>);
			this._ShippingProvider = default(EntityRef<ShippingProvider>);
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int")]
		public System.Nullable<int> CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNumber", DbType="VarChar(50)")]
		public string OrderNumber
		{
			get
			{
				return this._OrderNumber;
			}
			set
			{
				if ((this._OrderNumber != value))
				{
					this.OnOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._OrderNumber = value;
					this.SendPropertyChanged("OrderNumber");
					this.OnOrderNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderStatusID", DbType="Int")]
		public System.Nullable<int> OrderStatusID
		{
			get
			{
				return this._OrderStatusID;
			}
			set
			{
				if ((this._OrderStatusID != value))
				{
					if (this._OrderStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderStatusIDChanging(value);
					this.SendPropertyChanging();
					this._OrderStatusID = value;
					this.SendPropertyChanged("OrderStatusID");
					this.OnOrderStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShippingProviderID", DbType="Int")]
		public System.Nullable<int> ShippingProviderID
		{
			get
			{
				return this._ShippingProviderID;
			}
			set
			{
				if ((this._ShippingProviderID != value))
				{
					if (this._ShippingProvider.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShippingProviderIDChanging(value);
					this.SendPropertyChanging();
					this._ShippingProviderID = value;
					this.SendPropertyChanged("ShippingProviderID");
					this.OnShippingProviderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShippingNumber", DbType="VarChar(50)")]
		public string ShippingNumber
		{
			get
			{
				return this._ShippingNumber;
			}
			set
			{
				if ((this._ShippingNumber != value))
				{
					this.OnShippingNumberChanging(value);
					this.SendPropertyChanging();
					this._ShippingNumber = value;
					this.SendPropertyChanged("ShippingNumber");
					this.OnShippingNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Int")]
		public System.Nullable<int> StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", DbType="Int")]
		public System.Nullable<int> ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					if (this._Province.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceID = value;
					this.SendPropertyChanged("ProvinceID");
					this.OnProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zipcode", DbType="VarChar(50)")]
		public string Zipcode
		{
			get
			{
				return this._Zipcode;
			}
			set
			{
				if ((this._Zipcode != value))
				{
					this.OnZipcodeChanging(value);
					this.SendPropertyChanging();
					this._Zipcode = value;
					this.SendPropertyChanged("Zipcode");
					this.OnZipcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(400)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatePlaced", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatePlaced
		{
			get
			{
				return this._DatePlaced;
			}
			set
			{
				if ((this._DatePlaced != value))
				{
					this.OnDatePlacedChanging(value);
					this.SendPropertyChanging();
					this._DatePlaced = value;
					this.SendPropertyChanged("DatePlaced");
					this.OnDatePlacedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateShipped", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateShipped
		{
			get
			{
				return this._DateShipped;
			}
			set
			{
				if ((this._DateShipped != value))
				{
					this.OnDateShippedChanging(value);
					this.SendPropertyChanging();
					this._DateShipped = value;
					this.SendPropertyChanged("DateShipped");
					this.OnDateShippedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Money")]
		public System.Nullable<decimal> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shipping", DbType="Money")]
		public System.Nullable<decimal> Shipping
		{
			get
			{
				return this._Shipping;
			}
			set
			{
				if ((this._Shipping != value))
				{
					this.OnShippingChanging(value);
					this.SendPropertyChanging();
					this._Shipping = value;
					this.SendPropertyChanged("Shipping");
					this.OnShippingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tax", DbType="Money")]
		public System.Nullable<decimal> Tax
		{
			get
			{
				return this._Tax;
			}
			set
			{
				if ((this._Tax != value))
				{
					this.OnTaxChanging(value);
					this.SendPropertyChanging();
					this._Tax = value;
					this.SendPropertyChanged("Tax");
					this.OnTaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderProduct", Storage="_OrderProducts", ThisKey="OrderID", OtherKey="OrderID")]
		public EntitySet<OrderProduct> OrderProducts
		{
			get
			{
				return this._OrderProducts;
			}
			set
			{
				this._OrderProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Order", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderStatus_Order", Storage="_OrderStatus", ThisKey="OrderStatusID", OtherKey="OrderStatusID", IsForeignKey=true)]
		public OrderStatus OrderStatus
		{
			get
			{
				return this._OrderStatus.Entity;
			}
			set
			{
				OrderStatus previousValue = this._OrderStatus.Entity;
				if (((previousValue != value) 
							|| (this._OrderStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderStatus.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._OrderStatus.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._OrderStatusID = value.OrderStatusID;
					}
					else
					{
						this._OrderStatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("OrderStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_Order", Storage="_Province", ThisKey="ProvinceID", OtherKey="ProvinceID", IsForeignKey=true)]
		public Province Province
		{
			get
			{
				return this._Province.Entity;
			}
			set
			{
				Province previousValue = this._Province.Entity;
				if (((previousValue != value) 
							|| (this._Province.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Province.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Province.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._ProvinceID = value.ProvinceID;
					}
					else
					{
						this._ProvinceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Province");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShippingProvider_Order", Storage="_ShippingProvider", ThisKey="ShippingProviderID", OtherKey="ShippingProviderID", IsForeignKey=true)]
		public ShippingProvider ShippingProvider
		{
			get
			{
				return this._ShippingProvider.Entity;
			}
			set
			{
				ShippingProvider previousValue = this._ShippingProvider.Entity;
				if (((previousValue != value) 
							|| (this._ShippingProvider.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShippingProvider.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._ShippingProvider.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._ShippingProviderID = value.ShippingProviderID;
					}
					else
					{
						this._ShippingProviderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ShippingProvider");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Order", Storage="_State", ThisKey="StateID", OtherKey="StateID", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._StateID = value.StateID;
					}
					else
					{
						this._StateID = default(Nullable<int>);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderProducts(OrderProduct entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderProducts(OrderProduct entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderProduct")]
	public partial class OrderProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderProductID;
		
		private int _OrderID;
		
		private int _ProductID;
		
		private int _Quantity;
		
		private decimal _PricePerUnit;
		
		private decimal _TotalPrice;
		
		private System.Nullable<decimal> _Discount;
		
		private System.Nullable<decimal> _Shipping;
		
		private string _DownloadKey;
		
		private string _DownloadURL;
		
		private System.Nullable<System.DateTime> _OrderDate;
		
		private bool _Active;
		
		private EntitySet<OrderProductCustomField> _OrderProductCustomFields;
		
		private EntitySet<OrderProductOption> _OrderProductOptions;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderProductIDChanging(int value);
    partial void OnOrderProductIDChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnPricePerUnitChanging(decimal value);
    partial void OnPricePerUnitChanged();
    partial void OnTotalPriceChanging(decimal value);
    partial void OnTotalPriceChanged();
    partial void OnDiscountChanging(System.Nullable<decimal> value);
    partial void OnDiscountChanged();
    partial void OnShippingChanging(System.Nullable<decimal> value);
    partial void OnShippingChanged();
    partial void OnDownloadKeyChanging(string value);
    partial void OnDownloadKeyChanged();
    partial void OnDownloadURLChanging(string value);
    partial void OnDownloadURLChanged();
    partial void OnOrderDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrderDateChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public OrderProduct()
		{
			this._OrderProductCustomFields = new EntitySet<OrderProductCustomField>(new Action<OrderProductCustomField>(this.attach_OrderProductCustomFields), new Action<OrderProductCustomField>(this.detach_OrderProductCustomFields));
			this._OrderProductOptions = new EntitySet<OrderProductOption>(new Action<OrderProductOption>(this.attach_OrderProductOptions), new Action<OrderProductOption>(this.detach_OrderProductOptions));
			this._Order = default(EntityRef<Order>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderProductID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderProductID
		{
			get
			{
				return this._OrderProductID;
			}
			set
			{
				if ((this._OrderProductID != value))
				{
					this.OnOrderProductIDChanging(value);
					this.SendPropertyChanging();
					this._OrderProductID = value;
					this.SendPropertyChanged("OrderProductID");
					this.OnOrderProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int NOT NULL")]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PricePerUnit", DbType="Money NOT NULL")]
		public decimal PricePerUnit
		{
			get
			{
				return this._PricePerUnit;
			}
			set
			{
				if ((this._PricePerUnit != value))
				{
					this.OnPricePerUnitChanging(value);
					this.SendPropertyChanging();
					this._PricePerUnit = value;
					this.SendPropertyChanged("PricePerUnit");
					this.OnPricePerUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Money NOT NULL")]
		public decimal TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Money")]
		public System.Nullable<decimal> Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shipping", DbType="Money")]
		public System.Nullable<decimal> Shipping
		{
			get
			{
				return this._Shipping;
			}
			set
			{
				if ((this._Shipping != value))
				{
					this.OnShippingChanging(value);
					this.SendPropertyChanging();
					this._Shipping = value;
					this.SendPropertyChanged("Shipping");
					this.OnShippingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DownloadKey", DbType="VarChar(50)")]
		public string DownloadKey
		{
			get
			{
				return this._DownloadKey;
			}
			set
			{
				if ((this._DownloadKey != value))
				{
					this.OnDownloadKeyChanging(value);
					this.SendPropertyChanging();
					this._DownloadKey = value;
					this.SendPropertyChanged("DownloadKey");
					this.OnDownloadKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DownloadURL", DbType="VarChar(400)")]
		public string DownloadURL
		{
			get
			{
				return this._DownloadURL;
			}
			set
			{
				if ((this._DownloadURL != value))
				{
					this.OnDownloadURLChanging(value);
					this.SendPropertyChanging();
					this._DownloadURL = value;
					this.SendPropertyChanged("DownloadURL");
					this.OnDownloadURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderProduct_OrderProductCustomField", Storage="_OrderProductCustomFields", ThisKey="OrderProductID", OtherKey="OrderProductID")]
		public EntitySet<OrderProductCustomField> OrderProductCustomFields
		{
			get
			{
				return this._OrderProductCustomFields;
			}
			set
			{
				this._OrderProductCustomFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderProduct_OrderProductOption", Storage="_OrderProductOptions", ThisKey="OrderProductID", OtherKey="OrderProductID")]
		public EntitySet<OrderProductOption> OrderProductOptions
		{
			get
			{
				return this._OrderProductOptions;
			}
			set
			{
				this._OrderProductOptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderProduct", Storage="_Order", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderProducts.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderProducts.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OrderProduct", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.OrderProducts.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.OrderProducts.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderProductCustomFields(OrderProductCustomField entity)
		{
			this.SendPropertyChanging();
			entity.OrderProduct = this;
		}
		
		private void detach_OrderProductCustomFields(OrderProductCustomField entity)
		{
			this.SendPropertyChanging();
			entity.OrderProduct = null;
		}
		
		private void attach_OrderProductOptions(OrderProductOption entity)
		{
			this.SendPropertyChanging();
			entity.OrderProduct = this;
		}
		
		private void detach_OrderProductOptions(OrderProductOption entity)
		{
			this.SendPropertyChanging();
			entity.OrderProduct = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderProductCustomField")]
	public partial class OrderProductCustomField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderProductCustomFieldID;
		
		private int _OrderProductID;
		
		private int _CustomFieldID;
		
		private string _OrderProductCustomFieldValue;
		
		private bool _Active;
		
		private EntityRef<CustomField> _CustomField;
		
		private EntityRef<OrderProduct> _OrderProduct;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderProductCustomFieldIDChanging(int value);
    partial void OnOrderProductCustomFieldIDChanged();
    partial void OnOrderProductIDChanging(int value);
    partial void OnOrderProductIDChanged();
    partial void OnCustomFieldIDChanging(int value);
    partial void OnCustomFieldIDChanged();
    partial void OnOrderProductCustomFieldValueChanging(string value);
    partial void OnOrderProductCustomFieldValueChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public OrderProductCustomField()
		{
			this._CustomField = default(EntityRef<CustomField>);
			this._OrderProduct = default(EntityRef<OrderProduct>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderProductCustomFieldID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderProductCustomFieldID
		{
			get
			{
				return this._OrderProductCustomFieldID;
			}
			set
			{
				if ((this._OrderProductCustomFieldID != value))
				{
					this.OnOrderProductCustomFieldIDChanging(value);
					this.SendPropertyChanging();
					this._OrderProductCustomFieldID = value;
					this.SendPropertyChanged("OrderProductCustomFieldID");
					this.OnOrderProductCustomFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderProductID", DbType="Int NOT NULL")]
		public int OrderProductID
		{
			get
			{
				return this._OrderProductID;
			}
			set
			{
				if ((this._OrderProductID != value))
				{
					if (this._OrderProduct.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderProductIDChanging(value);
					this.SendPropertyChanging();
					this._OrderProductID = value;
					this.SendPropertyChanged("OrderProductID");
					this.OnOrderProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomFieldID", DbType="Int NOT NULL")]
		public int CustomFieldID
		{
			get
			{
				return this._CustomFieldID;
			}
			set
			{
				if ((this._CustomFieldID != value))
				{
					if (this._CustomField.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomFieldIDChanging(value);
					this.SendPropertyChanging();
					this._CustomFieldID = value;
					this.SendPropertyChanged("CustomFieldID");
					this.OnCustomFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderProductCustomFieldValue", DbType="VarChar(400)")]
		public string OrderProductCustomFieldValue
		{
			get
			{
				return this._OrderProductCustomFieldValue;
			}
			set
			{
				if ((this._OrderProductCustomFieldValue != value))
				{
					this.OnOrderProductCustomFieldValueChanging(value);
					this.SendPropertyChanging();
					this._OrderProductCustomFieldValue = value;
					this.SendPropertyChanged("OrderProductCustomFieldValue");
					this.OnOrderProductCustomFieldValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomField_OrderProductCustomField", Storage="_CustomField", ThisKey="CustomFieldID", OtherKey="CustomFieldID", IsForeignKey=true)]
		public CustomField CustomField
		{
			get
			{
				return this._CustomField.Entity;
			}
			set
			{
				CustomField previousValue = this._CustomField.Entity;
				if (((previousValue != value) 
							|| (this._CustomField.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomField.Entity = null;
						previousValue.OrderProductCustomFields.Remove(this);
					}
					this._CustomField.Entity = value;
					if ((value != null))
					{
						value.OrderProductCustomFields.Add(this);
						this._CustomFieldID = value.CustomFieldID;
					}
					else
					{
						this._CustomFieldID = default(int);
					}
					this.SendPropertyChanged("CustomField");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderProduct_OrderProductCustomField", Storage="_OrderProduct", ThisKey="OrderProductID", OtherKey="OrderProductID", IsForeignKey=true)]
		public OrderProduct OrderProduct
		{
			get
			{
				return this._OrderProduct.Entity;
			}
			set
			{
				OrderProduct previousValue = this._OrderProduct.Entity;
				if (((previousValue != value) 
							|| (this._OrderProduct.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderProduct.Entity = null;
						previousValue.OrderProductCustomFields.Remove(this);
					}
					this._OrderProduct.Entity = value;
					if ((value != null))
					{
						value.OrderProductCustomFields.Add(this);
						this._OrderProductID = value.OrderProductID;
					}
					else
					{
						this._OrderProductID = default(int);
					}
					this.SendPropertyChanged("OrderProduct");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderProductOption")]
	public partial class OrderProductOption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderProductOptionID;
		
		private int _OrderProductID;
		
		private int _ProductOptionID;
		
		private bool _Active;
		
		private EntityRef<OrderProduct> _OrderProduct;
		
		private EntityRef<ProductOption> _ProductOption;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderProductOptionIDChanging(int value);
    partial void OnOrderProductOptionIDChanged();
    partial void OnOrderProductIDChanging(int value);
    partial void OnOrderProductIDChanged();
    partial void OnProductOptionIDChanging(int value);
    partial void OnProductOptionIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public OrderProductOption()
		{
			this._OrderProduct = default(EntityRef<OrderProduct>);
			this._ProductOption = default(EntityRef<ProductOption>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderProductOptionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderProductOptionID
		{
			get
			{
				return this._OrderProductOptionID;
			}
			set
			{
				if ((this._OrderProductOptionID != value))
				{
					this.OnOrderProductOptionIDChanging(value);
					this.SendPropertyChanging();
					this._OrderProductOptionID = value;
					this.SendPropertyChanged("OrderProductOptionID");
					this.OnOrderProductOptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderProductID", DbType="Int NOT NULL")]
		public int OrderProductID
		{
			get
			{
				return this._OrderProductID;
			}
			set
			{
				if ((this._OrderProductID != value))
				{
					if (this._OrderProduct.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderProductIDChanging(value);
					this.SendPropertyChanging();
					this._OrderProductID = value;
					this.SendPropertyChanged("OrderProductID");
					this.OnOrderProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductOptionID", DbType="Int NOT NULL")]
		public int ProductOptionID
		{
			get
			{
				return this._ProductOptionID;
			}
			set
			{
				if ((this._ProductOptionID != value))
				{
					if (this._ProductOption.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductOptionIDChanging(value);
					this.SendPropertyChanging();
					this._ProductOptionID = value;
					this.SendPropertyChanged("ProductOptionID");
					this.OnProductOptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderProduct_OrderProductOption", Storage="_OrderProduct", ThisKey="OrderProductID", OtherKey="OrderProductID", IsForeignKey=true)]
		public OrderProduct OrderProduct
		{
			get
			{
				return this._OrderProduct.Entity;
			}
			set
			{
				OrderProduct previousValue = this._OrderProduct.Entity;
				if (((previousValue != value) 
							|| (this._OrderProduct.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderProduct.Entity = null;
						previousValue.OrderProductOptions.Remove(this);
					}
					this._OrderProduct.Entity = value;
					if ((value != null))
					{
						value.OrderProductOptions.Add(this);
						this._OrderProductID = value.OrderProductID;
					}
					else
					{
						this._OrderProductID = default(int);
					}
					this.SendPropertyChanged("OrderProduct");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductOption_OrderProductOption", Storage="_ProductOption", ThisKey="ProductOptionID", OtherKey="ProductOptionID", IsForeignKey=true)]
		public ProductOption ProductOption
		{
			get
			{
				return this._ProductOption.Entity;
			}
			set
			{
				ProductOption previousValue = this._ProductOption.Entity;
				if (((previousValue != value) 
							|| (this._ProductOption.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductOption.Entity = null;
						previousValue.OrderProductOptions.Remove(this);
					}
					this._ProductOption.Entity = value;
					if ((value != null))
					{
						value.OrderProductOptions.Add(this);
						this._ProductOptionID = value.ProductOptionID;
					}
					else
					{
						this._ProductOptionID = default(int);
					}
					this.SendPropertyChanged("ProductOption");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderStatus")]
	public partial class OrderStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderStatusID;
		
		private string _OrderStatusName;
		
		private bool _Active;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderStatusIDChanging(int value);
    partial void OnOrderStatusIDChanged();
    partial void OnOrderStatusNameChanging(string value);
    partial void OnOrderStatusNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public OrderStatus()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderStatusID
		{
			get
			{
				return this._OrderStatusID;
			}
			set
			{
				if ((this._OrderStatusID != value))
				{
					this.OnOrderStatusIDChanging(value);
					this.SendPropertyChanging();
					this._OrderStatusID = value;
					this.SendPropertyChanged("OrderStatusID");
					this.OnOrderStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderStatusName", DbType="VarChar(50)")]
		public string OrderStatusName
		{
			get
			{
				return this._OrderStatusName;
			}
			set
			{
				if ((this._OrderStatusName != value))
				{
					this.OnOrderStatusNameChanging(value);
					this.SendPropertyChanging();
					this._OrderStatusName = value;
					this.SendPropertyChanged("OrderStatusName");
					this.OnOrderStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderStatus_Order", Storage="_Orders", ThisKey="OrderStatusID", OtherKey="OrderStatusID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatus = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductID;
		
		private string _ProductName;
		
		private string _CatalogNumber;
		
		private string _Description;
		
		private decimal _Price;
		
		private decimal _SalePrice;
		
		private System.Nullable<decimal> _Weight;
		
		private System.Nullable<decimal> _ShippingWeight;
		
		private System.Nullable<decimal> _Height;
		
		private System.Nullable<decimal> _ShippingHeight;
		
		private System.Nullable<decimal> _Length;
		
		private System.Nullable<decimal> _ShippingLength;
		
		private System.Nullable<decimal> _Width;
		
		private System.Nullable<decimal> _ShippingWidth;
		
		private bool _IsDownloadable;
		
		private System.Nullable<bool> _IsDownloadKeyRequired;
		
		private System.Nullable<bool> _IsDownloadKeyUnique;
		
		private string _DownloadURL;
		
		private bool _IsReviewEnabled;
		
		private int _TotalReviewCount;
		
		private System.Nullable<decimal> _RatingScore;
		
		private bool _Active;
		
		private EntitySet<CustomField> _CustomFields;
		
		private EntitySet<FeaturedProduct> _FeaturedProducts;
		
		private EntitySet<Image> _Images;
		
		private EntitySet<Inventory> _Inventories;
		
		private EntitySet<OrderProduct> _OrderProducts;
		
		private EntitySet<ProductCategory> _ProductCategories;
		
		private EntitySet<ProductDownloadKey> _ProductDownloadKeys;
		
		private EntitySet<ProductOption> _ProductOptions;
		
		private EntitySet<ProductReview> _ProductReviews;
		
		private EntitySet<ProductTag> _ProductTags;
		
		private EntitySet<RelatedProduct> _RelatedProducts;
		
		private EntitySet<RelatedProduct> _RelatedProducts1;
		
		private EntitySet<Shipping> _Shippings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnCatalogNumberChanging(string value);
    partial void OnCatalogNumberChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnSalePriceChanging(decimal value);
    partial void OnSalePriceChanged();
    partial void OnWeightChanging(System.Nullable<decimal> value);
    partial void OnWeightChanged();
    partial void OnShippingWeightChanging(System.Nullable<decimal> value);
    partial void OnShippingWeightChanged();
    partial void OnHeightChanging(System.Nullable<decimal> value);
    partial void OnHeightChanged();
    partial void OnShippingHeightChanging(System.Nullable<decimal> value);
    partial void OnShippingHeightChanged();
    partial void OnLengthChanging(System.Nullable<decimal> value);
    partial void OnLengthChanged();
    partial void OnShippingLengthChanging(System.Nullable<decimal> value);
    partial void OnShippingLengthChanged();
    partial void OnWidthChanging(System.Nullable<decimal> value);
    partial void OnWidthChanged();
    partial void OnShippingWidthChanging(System.Nullable<decimal> value);
    partial void OnShippingWidthChanged();
    partial void OnIsDownloadableChanging(bool value);
    partial void OnIsDownloadableChanged();
    partial void OnIsDownloadKeyRequiredChanging(System.Nullable<bool> value);
    partial void OnIsDownloadKeyRequiredChanged();
    partial void OnIsDownloadKeyUniqueChanging(System.Nullable<bool> value);
    partial void OnIsDownloadKeyUniqueChanged();
    partial void OnDownloadURLChanging(string value);
    partial void OnDownloadURLChanged();
    partial void OnIsReviewEnabledChanging(bool value);
    partial void OnIsReviewEnabledChanged();
    partial void OnTotalReviewCountChanging(int value);
    partial void OnTotalReviewCountChanged();
    partial void OnRatingScoreChanging(System.Nullable<decimal> value);
    partial void OnRatingScoreChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Product()
		{
			this._CustomFields = new EntitySet<CustomField>(new Action<CustomField>(this.attach_CustomFields), new Action<CustomField>(this.detach_CustomFields));
			this._FeaturedProducts = new EntitySet<FeaturedProduct>(new Action<FeaturedProduct>(this.attach_FeaturedProducts), new Action<FeaturedProduct>(this.detach_FeaturedProducts));
			this._Images = new EntitySet<Image>(new Action<Image>(this.attach_Images), new Action<Image>(this.detach_Images));
			this._Inventories = new EntitySet<Inventory>(new Action<Inventory>(this.attach_Inventories), new Action<Inventory>(this.detach_Inventories));
			this._OrderProducts = new EntitySet<OrderProduct>(new Action<OrderProduct>(this.attach_OrderProducts), new Action<OrderProduct>(this.detach_OrderProducts));
			this._ProductCategories = new EntitySet<ProductCategory>(new Action<ProductCategory>(this.attach_ProductCategories), new Action<ProductCategory>(this.detach_ProductCategories));
			this._ProductDownloadKeys = new EntitySet<ProductDownloadKey>(new Action<ProductDownloadKey>(this.attach_ProductDownloadKeys), new Action<ProductDownloadKey>(this.detach_ProductDownloadKeys));
			this._ProductOptions = new EntitySet<ProductOption>(new Action<ProductOption>(this.attach_ProductOptions), new Action<ProductOption>(this.detach_ProductOptions));
			this._ProductReviews = new EntitySet<ProductReview>(new Action<ProductReview>(this.attach_ProductReviews), new Action<ProductReview>(this.detach_ProductReviews));
			this._ProductTags = new EntitySet<ProductTag>(new Action<ProductTag>(this.attach_ProductTags), new Action<ProductTag>(this.detach_ProductTags));
			this._RelatedProducts = new EntitySet<RelatedProduct>(new Action<RelatedProduct>(this.attach_RelatedProducts), new Action<RelatedProduct>(this.detach_RelatedProducts));
			this._RelatedProducts1 = new EntitySet<RelatedProduct>(new Action<RelatedProduct>(this.attach_RelatedProducts1), new Action<RelatedProduct>(this.detach_RelatedProducts1));
			this._Shippings = new EntitySet<Shipping>(new Action<Shipping>(this.attach_Shippings), new Action<Shipping>(this.detach_Shippings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="VarChar(50)")]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatalogNumber", DbType="VarChar(50)")]
		public string CatalogNumber
		{
			get
			{
				return this._CatalogNumber;
			}
			set
			{
				if ((this._CatalogNumber != value))
				{
					this.OnCatalogNumberChanging(value);
					this.SendPropertyChanging();
					this._CatalogNumber = value;
					this.SendPropertyChanged("CatalogNumber");
					this.OnCatalogNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalePrice", DbType="Money NOT NULL")]
		public decimal SalePrice
		{
			get
			{
				return this._SalePrice;
			}
			set
			{
				if ((this._SalePrice != value))
				{
					this.OnSalePriceChanging(value);
					this.SendPropertyChanging();
					this._SalePrice = value;
					this.SendPropertyChanged("SalePrice");
					this.OnSalePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShippingWeight", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> ShippingWeight
		{
			get
			{
				return this._ShippingWeight;
			}
			set
			{
				if ((this._ShippingWeight != value))
				{
					this.OnShippingWeightChanging(value);
					this.SendPropertyChanging();
					this._ShippingWeight = value;
					this.SendPropertyChanged("ShippingWeight");
					this.OnShippingWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShippingHeight", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> ShippingHeight
		{
			get
			{
				return this._ShippingHeight;
			}
			set
			{
				if ((this._ShippingHeight != value))
				{
					this.OnShippingHeightChanging(value);
					this.SendPropertyChanging();
					this._ShippingHeight = value;
					this.SendPropertyChanged("ShippingHeight");
					this.OnShippingHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShippingLength", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> ShippingLength
		{
			get
			{
				return this._ShippingLength;
			}
			set
			{
				if ((this._ShippingLength != value))
				{
					this.OnShippingLengthChanging(value);
					this.SendPropertyChanging();
					this._ShippingLength = value;
					this.SendPropertyChanged("ShippingLength");
					this.OnShippingLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShippingWidth", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> ShippingWidth
		{
			get
			{
				return this._ShippingWidth;
			}
			set
			{
				if ((this._ShippingWidth != value))
				{
					this.OnShippingWidthChanging(value);
					this.SendPropertyChanging();
					this._ShippingWidth = value;
					this.SendPropertyChanged("ShippingWidth");
					this.OnShippingWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDownloadable", DbType="Bit NOT NULL")]
		public bool IsDownloadable
		{
			get
			{
				return this._IsDownloadable;
			}
			set
			{
				if ((this._IsDownloadable != value))
				{
					this.OnIsDownloadableChanging(value);
					this.SendPropertyChanging();
					this._IsDownloadable = value;
					this.SendPropertyChanged("IsDownloadable");
					this.OnIsDownloadableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDownloadKeyRequired", DbType="Bit")]
		public System.Nullable<bool> IsDownloadKeyRequired
		{
			get
			{
				return this._IsDownloadKeyRequired;
			}
			set
			{
				if ((this._IsDownloadKeyRequired != value))
				{
					this.OnIsDownloadKeyRequiredChanging(value);
					this.SendPropertyChanging();
					this._IsDownloadKeyRequired = value;
					this.SendPropertyChanged("IsDownloadKeyRequired");
					this.OnIsDownloadKeyRequiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDownloadKeyUnique", DbType="Bit")]
		public System.Nullable<bool> IsDownloadKeyUnique
		{
			get
			{
				return this._IsDownloadKeyUnique;
			}
			set
			{
				if ((this._IsDownloadKeyUnique != value))
				{
					this.OnIsDownloadKeyUniqueChanging(value);
					this.SendPropertyChanging();
					this._IsDownloadKeyUnique = value;
					this.SendPropertyChanged("IsDownloadKeyUnique");
					this.OnIsDownloadKeyUniqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DownloadURL", DbType="VarChar(400)")]
		public string DownloadURL
		{
			get
			{
				return this._DownloadURL;
			}
			set
			{
				if ((this._DownloadURL != value))
				{
					this.OnDownloadURLChanging(value);
					this.SendPropertyChanging();
					this._DownloadURL = value;
					this.SendPropertyChanged("DownloadURL");
					this.OnDownloadURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsReviewEnabled", DbType="Bit NOT NULL")]
		public bool IsReviewEnabled
		{
			get
			{
				return this._IsReviewEnabled;
			}
			set
			{
				if ((this._IsReviewEnabled != value))
				{
					this.OnIsReviewEnabledChanging(value);
					this.SendPropertyChanging();
					this._IsReviewEnabled = value;
					this.SendPropertyChanged("IsReviewEnabled");
					this.OnIsReviewEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalReviewCount", DbType="Int NOT NULL")]
		public int TotalReviewCount
		{
			get
			{
				return this._TotalReviewCount;
			}
			set
			{
				if ((this._TotalReviewCount != value))
				{
					this.OnTotalReviewCountChanging(value);
					this.SendPropertyChanging();
					this._TotalReviewCount = value;
					this.SendPropertyChanged("TotalReviewCount");
					this.OnTotalReviewCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatingScore", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> RatingScore
		{
			get
			{
				return this._RatingScore;
			}
			set
			{
				if ((this._RatingScore != value))
				{
					this.OnRatingScoreChanging(value);
					this.SendPropertyChanging();
					this._RatingScore = value;
					this.SendPropertyChanged("RatingScore");
					this.OnRatingScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_CustomField", Storage="_CustomFields", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<CustomField> CustomFields
		{
			get
			{
				return this._CustomFields;
			}
			set
			{
				this._CustomFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_FeaturedProduct", Storage="_FeaturedProducts", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<FeaturedProduct> FeaturedProducts
		{
			get
			{
				return this._FeaturedProducts;
			}
			set
			{
				this._FeaturedProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Image", Storage="_Images", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<Image> Images
		{
			get
			{
				return this._Images;
			}
			set
			{
				this._Images.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Inventory", Storage="_Inventories", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<Inventory> Inventories
		{
			get
			{
				return this._Inventories;
			}
			set
			{
				this._Inventories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OrderProduct", Storage="_OrderProducts", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<OrderProduct> OrderProducts
		{
			get
			{
				return this._OrderProducts;
			}
			set
			{
				this._OrderProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductCategory", Storage="_ProductCategories", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<ProductCategory> ProductCategories
		{
			get
			{
				return this._ProductCategories;
			}
			set
			{
				this._ProductCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductDownloadKey", Storage="_ProductDownloadKeys", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<ProductDownloadKey> ProductDownloadKeys
		{
			get
			{
				return this._ProductDownloadKeys;
			}
			set
			{
				this._ProductDownloadKeys.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductOption", Storage="_ProductOptions", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<ProductOption> ProductOptions
		{
			get
			{
				return this._ProductOptions;
			}
			set
			{
				this._ProductOptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductReview", Storage="_ProductReviews", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<ProductReview> ProductReviews
		{
			get
			{
				return this._ProductReviews;
			}
			set
			{
				this._ProductReviews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductTag", Storage="_ProductTags", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<ProductTag> ProductTags
		{
			get
			{
				return this._ProductTags;
			}
			set
			{
				this._ProductTags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_RelatedProduct", Storage="_RelatedProducts", ThisKey="ProductID", OtherKey="ProductOneID")]
		public EntitySet<RelatedProduct> RelatedProducts
		{
			get
			{
				return this._RelatedProducts;
			}
			set
			{
				this._RelatedProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_RelatedProduct1", Storage="_RelatedProducts1", ThisKey="ProductID", OtherKey="ProductTwoID")]
		public EntitySet<RelatedProduct> RelatedProducts1
		{
			get
			{
				return this._RelatedProducts1;
			}
			set
			{
				this._RelatedProducts1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Shipping", Storage="_Shippings", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<Shipping> Shippings
		{
			get
			{
				return this._Shippings;
			}
			set
			{
				this._Shippings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomFields(CustomField entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_CustomFields(CustomField entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_FeaturedProducts(FeaturedProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_FeaturedProducts(FeaturedProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Images(Image entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Images(Image entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_OrderProducts(OrderProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_OrderProducts(OrderProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductCategories(ProductCategory entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductCategories(ProductCategory entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductDownloadKeys(ProductDownloadKey entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductDownloadKeys(ProductDownloadKey entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductOptions(ProductOption entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductOptions(ProductOption entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductReviews(ProductReview entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductReviews(ProductReview entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductTags(ProductTag entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductTags(ProductTag entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_RelatedProducts(RelatedProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_RelatedProducts(RelatedProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_RelatedProducts1(RelatedProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product1 = this;
		}
		
		private void detach_RelatedProducts1(RelatedProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product1 = null;
		}
		
		private void attach_Shippings(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Shippings(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductCategory")]
	public partial class ProductCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductCategoryID;
		
		private int _ProductID;
		
		private int _CategoryID;
		
		private bool _Active;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductCategoryIDChanging(int value);
    partial void OnProductCategoryIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public ProductCategory()
		{
			this._Category = default(EntityRef<Category>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductCategoryID
		{
			get
			{
				return this._ProductCategoryID;
			}
			set
			{
				if ((this._ProductCategoryID != value))
				{
					this.OnProductCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._ProductCategoryID = value;
					this.SendPropertyChanged("ProductCategoryID");
					this.OnProductCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_ProductCategory", Storage="_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.ProductCategories.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.ProductCategories.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductCategory", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductCategories.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductCategories.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductDownloadKey")]
	public partial class ProductDownloadKey : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductDownloadKeyID;
		
		private int _ProductID;
		
		private string _DownloadKey;
		
		private bool _Active;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductDownloadKeyIDChanging(int value);
    partial void OnProductDownloadKeyIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnDownloadKeyChanging(string value);
    partial void OnDownloadKeyChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public ProductDownloadKey()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductDownloadKeyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductDownloadKeyID
		{
			get
			{
				return this._ProductDownloadKeyID;
			}
			set
			{
				if ((this._ProductDownloadKeyID != value))
				{
					this.OnProductDownloadKeyIDChanging(value);
					this.SendPropertyChanging();
					this._ProductDownloadKeyID = value;
					this.SendPropertyChanged("ProductDownloadKeyID");
					this.OnProductDownloadKeyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DownloadKey", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DownloadKey
		{
			get
			{
				return this._DownloadKey;
			}
			set
			{
				if ((this._DownloadKey != value))
				{
					this.OnDownloadKeyChanging(value);
					this.SendPropertyChanging();
					this._DownloadKey = value;
					this.SendPropertyChanged("DownloadKey");
					this.OnDownloadKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductDownloadKey", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductDownloadKeys.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductDownloadKeys.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductOption")]
	public partial class ProductOption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductOptionID;
		
		private string _ProductOptionName;
		
		private string _ProductOptionGroup;
		
		private int _ProductID;
		
		private decimal _PriceChange;
		
		private bool _Active;
		
		private EntitySet<InventoryProductOption> _InventoryProductOptions;
		
		private EntitySet<OrderProductOption> _OrderProductOptions;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductOptionIDChanging(int value);
    partial void OnProductOptionIDChanged();
    partial void OnProductOptionNameChanging(string value);
    partial void OnProductOptionNameChanged();
    partial void OnProductOptionGroupChanging(string value);
    partial void OnProductOptionGroupChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnPriceChangeChanging(decimal value);
    partial void OnPriceChangeChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public ProductOption()
		{
			this._InventoryProductOptions = new EntitySet<InventoryProductOption>(new Action<InventoryProductOption>(this.attach_InventoryProductOptions), new Action<InventoryProductOption>(this.detach_InventoryProductOptions));
			this._OrderProductOptions = new EntitySet<OrderProductOption>(new Action<OrderProductOption>(this.attach_OrderProductOptions), new Action<OrderProductOption>(this.detach_OrderProductOptions));
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductOptionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductOptionID
		{
			get
			{
				return this._ProductOptionID;
			}
			set
			{
				if ((this._ProductOptionID != value))
				{
					this.OnProductOptionIDChanging(value);
					this.SendPropertyChanging();
					this._ProductOptionID = value;
					this.SendPropertyChanged("ProductOptionID");
					this.OnProductOptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductOptionName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ProductOptionName
		{
			get
			{
				return this._ProductOptionName;
			}
			set
			{
				if ((this._ProductOptionName != value))
				{
					this.OnProductOptionNameChanging(value);
					this.SendPropertyChanging();
					this._ProductOptionName = value;
					this.SendPropertyChanged("ProductOptionName");
					this.OnProductOptionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductOptionGroup", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ProductOptionGroup
		{
			get
			{
				return this._ProductOptionGroup;
			}
			set
			{
				if ((this._ProductOptionGroup != value))
				{
					this.OnProductOptionGroupChanging(value);
					this.SendPropertyChanging();
					this._ProductOptionGroup = value;
					this.SendPropertyChanged("ProductOptionGroup");
					this.OnProductOptionGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceChange", DbType="Money NOT NULL")]
		public decimal PriceChange
		{
			get
			{
				return this._PriceChange;
			}
			set
			{
				if ((this._PriceChange != value))
				{
					this.OnPriceChangeChanging(value);
					this.SendPropertyChanging();
					this._PriceChange = value;
					this.SendPropertyChanged("PriceChange");
					this.OnPriceChangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductOption_InventoryProductOption", Storage="_InventoryProductOptions", ThisKey="ProductOptionID", OtherKey="ProductOptionID")]
		public EntitySet<InventoryProductOption> InventoryProductOptions
		{
			get
			{
				return this._InventoryProductOptions;
			}
			set
			{
				this._InventoryProductOptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductOption_OrderProductOption", Storage="_OrderProductOptions", ThisKey="ProductOptionID", OtherKey="ProductOptionID")]
		public EntitySet<OrderProductOption> OrderProductOptions
		{
			get
			{
				return this._OrderProductOptions;
			}
			set
			{
				this._OrderProductOptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductOption", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductOptions.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductOptions.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InventoryProductOptions(InventoryProductOption entity)
		{
			this.SendPropertyChanging();
			entity.ProductOption = this;
		}
		
		private void detach_InventoryProductOptions(InventoryProductOption entity)
		{
			this.SendPropertyChanging();
			entity.ProductOption = null;
		}
		
		private void attach_OrderProductOptions(OrderProductOption entity)
		{
			this.SendPropertyChanging();
			entity.ProductOption = this;
		}
		
		private void detach_OrderProductOptions(OrderProductOption entity)
		{
			this.SendPropertyChanging();
			entity.ProductOption = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductReview")]
	public partial class ProductReview : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductReviewID;
		
		private int _ProductID;
		
		private int _CustomerID;
		
		private string _ReviewText;
		
		private System.DateTime _ReviewDate;
		
		private bool _Active;
		
		private EntitySet<ProductReviewCaregoryProductReview> _ProductReviewCaregoryProductReviews;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductReviewIDChanging(int value);
    partial void OnProductReviewIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnReviewTextChanging(string value);
    partial void OnReviewTextChanged();
    partial void OnReviewDateChanging(System.DateTime value);
    partial void OnReviewDateChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public ProductReview()
		{
			this._ProductReviewCaregoryProductReviews = new EntitySet<ProductReviewCaregoryProductReview>(new Action<ProductReviewCaregoryProductReview>(this.attach_ProductReviewCaregoryProductReviews), new Action<ProductReviewCaregoryProductReview>(this.detach_ProductReviewCaregoryProductReviews));
			this._Customer = default(EntityRef<Customer>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductReviewID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductReviewID
		{
			get
			{
				return this._ProductReviewID;
			}
			set
			{
				if ((this._ProductReviewID != value))
				{
					this.OnProductReviewIDChanging(value);
					this.SendPropertyChanging();
					this._ProductReviewID = value;
					this.SendPropertyChanged("ProductReviewID");
					this.OnProductReviewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewText", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string ReviewText
		{
			get
			{
				return this._ReviewText;
			}
			set
			{
				if ((this._ReviewText != value))
				{
					this.OnReviewTextChanging(value);
					this.SendPropertyChanging();
					this._ReviewText = value;
					this.SendPropertyChanged("ReviewText");
					this.OnReviewTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewDate", DbType="DateTime NOT NULL")]
		public System.DateTime ReviewDate
		{
			get
			{
				return this._ReviewDate;
			}
			set
			{
				if ((this._ReviewDate != value))
				{
					this.OnReviewDateChanging(value);
					this.SendPropertyChanging();
					this._ReviewDate = value;
					this.SendPropertyChanged("ReviewDate");
					this.OnReviewDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductReview_ProductReviewCaregoryProductReview", Storage="_ProductReviewCaregoryProductReviews", ThisKey="ProductReviewID", OtherKey="ProductReviewID")]
		public EntitySet<ProductReviewCaregoryProductReview> ProductReviewCaregoryProductReviews
		{
			get
			{
				return this._ProductReviewCaregoryProductReviews;
			}
			set
			{
				this._ProductReviewCaregoryProductReviews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_ProductReview", Storage="_Customer", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.ProductReviews.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.ProductReviews.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductReview", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductReviews.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductReviews.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductReviewCaregoryProductReviews(ProductReviewCaregoryProductReview entity)
		{
			this.SendPropertyChanging();
			entity.ProductReview = this;
		}
		
		private void detach_ProductReviewCaregoryProductReviews(ProductReviewCaregoryProductReview entity)
		{
			this.SendPropertyChanging();
			entity.ProductReview = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductReviewCaregoryProductReview")]
	public partial class ProductReviewCaregoryProductReview : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductReviewCaregoryProductReviewID;
		
		private int _ProductReviewCategoryID;
		
		private int _ProductReviewID;
		
		private decimal _Rating;
		
		private bool _Active;
		
		private EntityRef<ProductReview> _ProductReview;
		
		private EntityRef<ProductReviewCategory> _ProductReviewCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductReviewCaregoryProductReviewIDChanging(int value);
    partial void OnProductReviewCaregoryProductReviewIDChanged();
    partial void OnProductReviewCategoryIDChanging(int value);
    partial void OnProductReviewCategoryIDChanged();
    partial void OnProductReviewIDChanging(int value);
    partial void OnProductReviewIDChanged();
    partial void OnRatingChanging(decimal value);
    partial void OnRatingChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public ProductReviewCaregoryProductReview()
		{
			this._ProductReview = default(EntityRef<ProductReview>);
			this._ProductReviewCategory = default(EntityRef<ProductReviewCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductReviewCaregoryProductReviewID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductReviewCaregoryProductReviewID
		{
			get
			{
				return this._ProductReviewCaregoryProductReviewID;
			}
			set
			{
				if ((this._ProductReviewCaregoryProductReviewID != value))
				{
					this.OnProductReviewCaregoryProductReviewIDChanging(value);
					this.SendPropertyChanging();
					this._ProductReviewCaregoryProductReviewID = value;
					this.SendPropertyChanged("ProductReviewCaregoryProductReviewID");
					this.OnProductReviewCaregoryProductReviewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductReviewCategoryID", DbType="Int NOT NULL")]
		public int ProductReviewCategoryID
		{
			get
			{
				return this._ProductReviewCategoryID;
			}
			set
			{
				if ((this._ProductReviewCategoryID != value))
				{
					if (this._ProductReviewCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductReviewCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._ProductReviewCategoryID = value;
					this.SendPropertyChanged("ProductReviewCategoryID");
					this.OnProductReviewCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductReviewID", DbType="Int NOT NULL")]
		public int ProductReviewID
		{
			get
			{
				return this._ProductReviewID;
			}
			set
			{
				if ((this._ProductReviewID != value))
				{
					if (this._ProductReview.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductReviewIDChanging(value);
					this.SendPropertyChanging();
					this._ProductReviewID = value;
					this.SendPropertyChanged("ProductReviewID");
					this.OnProductReviewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Decimal(18,0) NOT NULL")]
		public decimal Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductReview_ProductReviewCaregoryProductReview", Storage="_ProductReview", ThisKey="ProductReviewID", OtherKey="ProductReviewID", IsForeignKey=true)]
		public ProductReview ProductReview
		{
			get
			{
				return this._ProductReview.Entity;
			}
			set
			{
				ProductReview previousValue = this._ProductReview.Entity;
				if (((previousValue != value) 
							|| (this._ProductReview.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductReview.Entity = null;
						previousValue.ProductReviewCaregoryProductReviews.Remove(this);
					}
					this._ProductReview.Entity = value;
					if ((value != null))
					{
						value.ProductReviewCaregoryProductReviews.Add(this);
						this._ProductReviewID = value.ProductReviewID;
					}
					else
					{
						this._ProductReviewID = default(int);
					}
					this.SendPropertyChanged("ProductReview");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductReviewCategory_ProductReviewCaregoryProductReview", Storage="_ProductReviewCategory", ThisKey="ProductReviewCategoryID", OtherKey="ProductReviewCategoryID", IsForeignKey=true)]
		public ProductReviewCategory ProductReviewCategory
		{
			get
			{
				return this._ProductReviewCategory.Entity;
			}
			set
			{
				ProductReviewCategory previousValue = this._ProductReviewCategory.Entity;
				if (((previousValue != value) 
							|| (this._ProductReviewCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductReviewCategory.Entity = null;
						previousValue.ProductReviewCaregoryProductReviews.Remove(this);
					}
					this._ProductReviewCategory.Entity = value;
					if ((value != null))
					{
						value.ProductReviewCaregoryProductReviews.Add(this);
						this._ProductReviewCategoryID = value.ProductReviewCategoryID;
					}
					else
					{
						this._ProductReviewCategoryID = default(int);
					}
					this.SendPropertyChanged("ProductReviewCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductReviewCategory")]
	public partial class ProductReviewCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductReviewCategoryID;
		
		private string _ProductReviewCategoryName;
		
		private bool _Active;
		
		private EntitySet<ProductReviewCaregoryProductReview> _ProductReviewCaregoryProductReviews;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductReviewCategoryIDChanging(int value);
    partial void OnProductReviewCategoryIDChanged();
    partial void OnProductReviewCategoryNameChanging(string value);
    partial void OnProductReviewCategoryNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public ProductReviewCategory()
		{
			this._ProductReviewCaregoryProductReviews = new EntitySet<ProductReviewCaregoryProductReview>(new Action<ProductReviewCaregoryProductReview>(this.attach_ProductReviewCaregoryProductReviews), new Action<ProductReviewCaregoryProductReview>(this.detach_ProductReviewCaregoryProductReviews));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductReviewCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductReviewCategoryID
		{
			get
			{
				return this._ProductReviewCategoryID;
			}
			set
			{
				if ((this._ProductReviewCategoryID != value))
				{
					this.OnProductReviewCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._ProductReviewCategoryID = value;
					this.SendPropertyChanged("ProductReviewCategoryID");
					this.OnProductReviewCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductReviewCategoryName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ProductReviewCategoryName
		{
			get
			{
				return this._ProductReviewCategoryName;
			}
			set
			{
				if ((this._ProductReviewCategoryName != value))
				{
					this.OnProductReviewCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._ProductReviewCategoryName = value;
					this.SendPropertyChanged("ProductReviewCategoryName");
					this.OnProductReviewCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductReviewCategory_ProductReviewCaregoryProductReview", Storage="_ProductReviewCaregoryProductReviews", ThisKey="ProductReviewCategoryID", OtherKey="ProductReviewCategoryID")]
		public EntitySet<ProductReviewCaregoryProductReview> ProductReviewCaregoryProductReviews
		{
			get
			{
				return this._ProductReviewCaregoryProductReviews;
			}
			set
			{
				this._ProductReviewCaregoryProductReviews.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductReviewCaregoryProductReviews(ProductReviewCaregoryProductReview entity)
		{
			this.SendPropertyChanging();
			entity.ProductReviewCategory = this;
		}
		
		private void detach_ProductReviewCaregoryProductReviews(ProductReviewCaregoryProductReview entity)
		{
			this.SendPropertyChanging();
			entity.ProductReviewCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductTag")]
	public partial class ProductTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductTagID;
		
		private int _ProductID;
		
		private int _TagID;
		
		private bool _Active;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Tag> _Tag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductTagIDChanging(int value);
    partial void OnProductTagIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnTagIDChanging(int value);
    partial void OnTagIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public ProductTag()
		{
			this._Product = default(EntityRef<Product>);
			this._Tag = default(EntityRef<Tag>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductTagID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductTagID
		{
			get
			{
				return this._ProductTagID;
			}
			set
			{
				if ((this._ProductTagID != value))
				{
					this.OnProductTagIDChanging(value);
					this.SendPropertyChanging();
					this._ProductTagID = value;
					this.SendPropertyChanged("ProductTagID");
					this.OnProductTagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagID", DbType="Int NOT NULL")]
		public int TagID
		{
			get
			{
				return this._TagID;
			}
			set
			{
				if ((this._TagID != value))
				{
					if (this._Tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIDChanging(value);
					this.SendPropertyChanging();
					this._TagID = value;
					this.SendPropertyChanged("TagID");
					this.OnTagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductTag", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductTags.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductTags.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_ProductTag", Storage="_Tag", ThisKey="TagID", OtherKey="TagID", IsForeignKey=true)]
		public Tag Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Tag previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.ProductTags.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.ProductTags.Add(this);
						this._TagID = value.TagID;
					}
					else
					{
						this._TagID = default(int);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Province")]
	public partial class Province : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProvinceID;
		
		private string _ProvinceName;
		
		private string _ProvinceCode;
		
		private string _Active;
		
		private EntitySet<Tax> _Taxes;
		
		private EntitySet<Customer> _Customers;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<Shipping> _Shippings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProvinceIDChanging(int value);
    partial void OnProvinceIDChanged();
    partial void OnProvinceNameChanging(string value);
    partial void OnProvinceNameChanged();
    partial void OnProvinceCodeChanging(string value);
    partial void OnProvinceCodeChanged();
    partial void OnActiveChanging(string value);
    partial void OnActiveChanged();
    #endregion
		
		public Province()
		{
			this._Taxes = new EntitySet<Tax>(new Action<Tax>(this.attach_Taxes), new Action<Tax>(this.detach_Taxes));
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Shippings = new EntitySet<Shipping>(new Action<Shipping>(this.attach_Shippings), new Action<Shipping>(this.detach_Shippings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					this.OnProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceID = value;
					this.SendPropertyChanged("ProvinceID");
					this.OnProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ProvinceName
		{
			get
			{
				return this._ProvinceName;
			}
			set
			{
				if ((this._ProvinceName != value))
				{
					this.OnProvinceNameChanging(value);
					this.SendPropertyChanging();
					this._ProvinceName = value;
					this.SendPropertyChanged("ProvinceName");
					this.OnProvinceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceCode", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string ProvinceCode
		{
			get
			{
				return this._ProvinceCode;
			}
			set
			{
				if ((this._ProvinceCode != value))
				{
					this.OnProvinceCodeChanging(value);
					this.SendPropertyChanging();
					this._ProvinceCode = value;
					this.SendPropertyChanged("ProvinceCode");
					this.OnProvinceCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_Tax", Storage="_Taxes", ThisKey="ProvinceID", OtherKey="ProvinceID")]
		public EntitySet<Tax> Taxes
		{
			get
			{
				return this._Taxes;
			}
			set
			{
				this._Taxes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_Customer", Storage="_Customers", ThisKey="ProvinceID", OtherKey="ProvinceID")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_Order", Storage="_Orders", ThisKey="ProvinceID", OtherKey="ProvinceID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_Shipping", Storage="_Shippings", ThisKey="ProvinceID", OtherKey="ProvinceID")]
		public EntitySet<Shipping> Shippings
		{
			get
			{
				return this._Shippings;
			}
			set
			{
				this._Shippings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Taxes(Tax entity)
		{
			this.SendPropertyChanging();
			entity.Province = this;
		}
		
		private void detach_Taxes(Tax entity)
		{
			this.SendPropertyChanging();
			entity.Province = null;
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Province = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Province = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Province = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Province = null;
		}
		
		private void attach_Shippings(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.Province = this;
		}
		
		private void detach_Shippings(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.Province = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RelatedProduct")]
	public partial class RelatedProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RelatedProductID;
		
		private int _ProductOneID;
		
		private int _ProductTwoID;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Product> _Product1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelatedProductIDChanging(int value);
    partial void OnRelatedProductIDChanged();
    partial void OnProductOneIDChanging(int value);
    partial void OnProductOneIDChanged();
    partial void OnProductTwoIDChanging(int value);
    partial void OnProductTwoIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public RelatedProduct()
		{
			this._Product = default(EntityRef<Product>);
			this._Product1 = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelatedProductID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RelatedProductID
		{
			get
			{
				return this._RelatedProductID;
			}
			set
			{
				if ((this._RelatedProductID != value))
				{
					this.OnRelatedProductIDChanging(value);
					this.SendPropertyChanging();
					this._RelatedProductID = value;
					this.SendPropertyChanged("RelatedProductID");
					this.OnRelatedProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductOneID", DbType="Int NOT NULL")]
		public int ProductOneID
		{
			get
			{
				return this._ProductOneID;
			}
			set
			{
				if ((this._ProductOneID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductOneIDChanging(value);
					this.SendPropertyChanging();
					this._ProductOneID = value;
					this.SendPropertyChanged("ProductOneID");
					this.OnProductOneIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductTwoID", DbType="Int NOT NULL")]
		public int ProductTwoID
		{
			get
			{
				return this._ProductTwoID;
			}
			set
			{
				if ((this._ProductTwoID != value))
				{
					if (this._Product1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductTwoIDChanging(value);
					this.SendPropertyChanging();
					this._ProductTwoID = value;
					this.SendPropertyChanged("ProductTwoID");
					this.OnProductTwoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_RelatedProduct", Storage="_Product", ThisKey="ProductOneID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.RelatedProducts.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.RelatedProducts.Add(this);
						this._ProductOneID = value.ProductID;
					}
					else
					{
						this._ProductOneID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_RelatedProduct1", Storage="_Product1", ThisKey="ProductTwoID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product1
		{
			get
			{
				return this._Product1.Entity;
			}
			set
			{
				Product previousValue = this._Product1.Entity;
				if (((previousValue != value) 
							|| (this._Product1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product1.Entity = null;
						previousValue.RelatedProducts1.Remove(this);
					}
					this._Product1.Entity = value;
					if ((value != null))
					{
						value.RelatedProducts1.Add(this);
						this._ProductTwoID = value.ProductID;
					}
					else
					{
						this._ProductTwoID = default(int);
					}
					this.SendPropertyChanged("Product1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Shipping")]
	public partial class Shipping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShippingID;
		
		private int _CountryID;
		
		private System.Nullable<int> _StateID;
		
		private System.Nullable<int> _ProvinceID;
		
		private int _ProductID;
		
		private int _ShippingProviderID;
		
		private decimal _Rate;
		
		private bool _Active;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Province> _Province;
		
		private EntityRef<ShippingProvider> _ShippingProvider;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShippingIDChanging(int value);
    partial void OnShippingIDChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnStateIDChanging(System.Nullable<int> value);
    partial void OnStateIDChanged();
    partial void OnProvinceIDChanging(System.Nullable<int> value);
    partial void OnProvinceIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnShippingProviderIDChanging(int value);
    partial void OnShippingProviderIDChanged();
    partial void OnRateChanging(decimal value);
    partial void OnRateChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Shipping()
		{
			this._Country = default(EntityRef<Country>);
			this._Product = default(EntityRef<Product>);
			this._Province = default(EntityRef<Province>);
			this._ShippingProvider = default(EntityRef<ShippingProvider>);
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShippingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ShippingID
		{
			get
			{
				return this._ShippingID;
			}
			set
			{
				if ((this._ShippingID != value))
				{
					this.OnShippingIDChanging(value);
					this.SendPropertyChanging();
					this._ShippingID = value;
					this.SendPropertyChanged("ShippingID");
					this.OnShippingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int NOT NULL")]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Int")]
		public System.Nullable<int> StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", DbType="Int")]
		public System.Nullable<int> ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					if (this._Province.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceID = value;
					this.SendPropertyChanged("ProvinceID");
					this.OnProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShippingProviderID", DbType="Int NOT NULL")]
		public int ShippingProviderID
		{
			get
			{
				return this._ShippingProviderID;
			}
			set
			{
				if ((this._ShippingProviderID != value))
				{
					if (this._ShippingProvider.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShippingProviderIDChanging(value);
					this.SendPropertyChanging();
					this._ShippingProviderID = value;
					this.SendPropertyChanged("ShippingProviderID");
					this.OnShippingProviderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Money NOT NULL")]
		public decimal Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Shipping", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Shippings.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Shippings.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Shipping", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Shippings.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Shippings.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_Shipping", Storage="_Province", ThisKey="ProvinceID", OtherKey="ProvinceID", IsForeignKey=true)]
		public Province Province
		{
			get
			{
				return this._Province.Entity;
			}
			set
			{
				Province previousValue = this._Province.Entity;
				if (((previousValue != value) 
							|| (this._Province.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Province.Entity = null;
						previousValue.Shippings.Remove(this);
					}
					this._Province.Entity = value;
					if ((value != null))
					{
						value.Shippings.Add(this);
						this._ProvinceID = value.ProvinceID;
					}
					else
					{
						this._ProvinceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Province");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShippingProvider_Shipping", Storage="_ShippingProvider", ThisKey="ShippingProviderID", OtherKey="ShippingProviderID", IsForeignKey=true)]
		public ShippingProvider ShippingProvider
		{
			get
			{
				return this._ShippingProvider.Entity;
			}
			set
			{
				ShippingProvider previousValue = this._ShippingProvider.Entity;
				if (((previousValue != value) 
							|| (this._ShippingProvider.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShippingProvider.Entity = null;
						previousValue.Shippings.Remove(this);
					}
					this._ShippingProvider.Entity = value;
					if ((value != null))
					{
						value.Shippings.Add(this);
						this._ShippingProviderID = value.ShippingProviderID;
					}
					else
					{
						this._ShippingProviderID = default(int);
					}
					this.SendPropertyChanged("ShippingProvider");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Shipping", Storage="_State", ThisKey="StateID", OtherKey="StateID", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.Shippings.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.Shippings.Add(this);
						this._StateID = value.StateID;
					}
					else
					{
						this._StateID = default(Nullable<int>);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShippingProvider")]
	public partial class ShippingProvider : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShippingProviderID;
		
		private string _ShippingProviderName;
		
		private decimal _ShippingCost;
		
		private bool _Active;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<Shipping> _Shippings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShippingProviderIDChanging(int value);
    partial void OnShippingProviderIDChanged();
    partial void OnShippingProviderNameChanging(string value);
    partial void OnShippingProviderNameChanged();
    partial void OnShippingCostChanging(decimal value);
    partial void OnShippingCostChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public ShippingProvider()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Shippings = new EntitySet<Shipping>(new Action<Shipping>(this.attach_Shippings), new Action<Shipping>(this.detach_Shippings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShippingProviderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ShippingProviderID
		{
			get
			{
				return this._ShippingProviderID;
			}
			set
			{
				if ((this._ShippingProviderID != value))
				{
					this.OnShippingProviderIDChanging(value);
					this.SendPropertyChanging();
					this._ShippingProviderID = value;
					this.SendPropertyChanged("ShippingProviderID");
					this.OnShippingProviderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShippingProviderName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ShippingProviderName
		{
			get
			{
				return this._ShippingProviderName;
			}
			set
			{
				if ((this._ShippingProviderName != value))
				{
					this.OnShippingProviderNameChanging(value);
					this.SendPropertyChanging();
					this._ShippingProviderName = value;
					this.SendPropertyChanged("ShippingProviderName");
					this.OnShippingProviderNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShippingCost", DbType="Money NOT NULL")]
		public decimal ShippingCost
		{
			get
			{
				return this._ShippingCost;
			}
			set
			{
				if ((this._ShippingCost != value))
				{
					this.OnShippingCostChanging(value);
					this.SendPropertyChanging();
					this._ShippingCost = value;
					this.SendPropertyChanged("ShippingCost");
					this.OnShippingCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShippingProvider_Order", Storage="_Orders", ThisKey="ShippingProviderID", OtherKey="ShippingProviderID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShippingProvider_Shipping", Storage="_Shippings", ThisKey="ShippingProviderID", OtherKey="ShippingProviderID")]
		public EntitySet<Shipping> Shippings
		{
			get
			{
				return this._Shippings;
			}
			set
			{
				this._Shippings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.ShippingProvider = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.ShippingProvider = null;
		}
		
		private void attach_Shippings(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.ShippingProvider = this;
		}
		
		private void detach_Shippings(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.ShippingProvider = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.State")]
	public partial class State : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StateID;
		
		private string _StateName;
		
		private string _StateCode;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<Tax> _Taxes;
		
		private EntitySet<Customer> _Customers;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<Shipping> _Shippings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStateIDChanging(int value);
    partial void OnStateIDChanged();
    partial void OnStateNameChanging(string value);
    partial void OnStateNameChanged();
    partial void OnStateCodeChanging(string value);
    partial void OnStateCodeChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public State()
		{
			this._Taxes = new EntitySet<Tax>(new Action<Tax>(this.attach_Taxes), new Action<Tax>(this.detach_Taxes));
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Shippings = new EntitySet<Shipping>(new Action<Shipping>(this.attach_Shippings), new Action<Shipping>(this.detach_Shippings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StateName
		{
			get
			{
				return this._StateName;
			}
			set
			{
				if ((this._StateName != value))
				{
					this.OnStateNameChanging(value);
					this.SendPropertyChanging();
					this._StateName = value;
					this.SendPropertyChanged("StateName");
					this.OnStateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateCode", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string StateCode
		{
			get
			{
				return this._StateCode;
			}
			set
			{
				if ((this._StateCode != value))
				{
					this.OnStateCodeChanging(value);
					this.SendPropertyChanging();
					this._StateCode = value;
					this.SendPropertyChanged("StateCode");
					this.OnStateCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Tax", Storage="_Taxes", ThisKey="StateID", OtherKey="StateID")]
		public EntitySet<Tax> Taxes
		{
			get
			{
				return this._Taxes;
			}
			set
			{
				this._Taxes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Customer", Storage="_Customers", ThisKey="StateID", OtherKey="StateID")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Order", Storage="_Orders", ThisKey="StateID", OtherKey="StateID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Shipping", Storage="_Shippings", ThisKey="StateID", OtherKey="StateID")]
		public EntitySet<Shipping> Shippings
		{
			get
			{
				return this._Shippings;
			}
			set
			{
				this._Shippings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Taxes(Tax entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_Taxes(Tax entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
		
		private void attach_Shippings(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_Shippings(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tag")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TagID;
		
		private string _TagName;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<ProductTag> _ProductTags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagIDChanging(int value);
    partial void OnTagIDChanged();
    partial void OnTagNameChanging(string value);
    partial void OnTagNameChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Tag()
		{
			this._ProductTags = new EntitySet<ProductTag>(new Action<ProductTag>(this.attach_ProductTags), new Action<ProductTag>(this.detach_ProductTags));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TagID
		{
			get
			{
				return this._TagID;
			}
			set
			{
				if ((this._TagID != value))
				{
					this.OnTagIDChanging(value);
					this.SendPropertyChanging();
					this._TagID = value;
					this.SendPropertyChanged("TagID");
					this.OnTagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TagName
		{
			get
			{
				return this._TagName;
			}
			set
			{
				if ((this._TagName != value))
				{
					this.OnTagNameChanging(value);
					this.SendPropertyChanging();
					this._TagName = value;
					this.SendPropertyChanged("TagName");
					this.OnTagNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_ProductTag", Storage="_ProductTags", ThisKey="TagID", OtherKey="TagID")]
		public EntitySet<ProductTag> ProductTags
		{
			get
			{
				return this._ProductTags;
			}
			set
			{
				this._ProductTags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductTags(ProductTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_ProductTags(ProductTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
	}
}
#pragma warning restore 1591
